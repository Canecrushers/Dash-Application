{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import boto3\n",
    "import io\n",
    "import pandas as pd\n",
    "import pyarrow.parquet as pq\n",
    "\n",
    "from pandas import DataFrame\n",
    "import pyspark\n",
    "from pyspark.sql import SparkSession\n",
    "import plotly\n",
    "from pyspark.ml.clustering import KMeans\n",
    "from pyspark.ml.evaluation import ClusteringEvaluator\n",
    "from pyspark.ml.feature import VectorAssembler\n",
    "from pyspark.sql import SQLContext\n",
    "from pyspark import SparkContext\n",
    "from pyspark import SparkConf\n",
    "from pyspark.context import SparkContext\n",
    "# plotly.offline.init_notebook_mode(connected=True)\n",
    "# import plotly.express as px\n",
    "\n",
    "\n",
    "client = boto3.client('s3')\n",
    "sc = SparkContext(\"local\", \"App Name\")\n",
    "sql = SQLContext(sc)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "buffer = io.BytesIO()\n",
    "s3 = boto3.resource('s3')\n",
    "s3_object = s3.Object('canecrushers-raw', 'img512/image_values_7680_10240_2016-12-22.snappy.parquet')\n",
    "s3_object.download_fileobj(buffer)\n",
    "table = pq.read_table(buffer)\n",
    "df = table.to_pandas()\n",
    "# s3.put_object(Body=object_data, Bucket='BucketName', Key='')\n",
    "\n",
    "# d\n",
    "sqlCtx = SQLContext(sc)\n",
    "spark_df = sqlCtx.createDataFrame(df)\n",
    "\n",
    "\n",
    "numberOfClusters = 4\n",
    "vegi1InputCols = ['NDVI','GNDVI','LAI']\n",
    "kmeans = KMeans().setK(numberOfClusters).setSeed(1)\n",
    "vegi1FeaturedDF = VectorAssembler(inputCols=vegi1InputCols, outputCol=\"features\").transform(spark_df)\n",
    "vegi1ClusteredDF = kmeans.fit(vegi1FeaturedDF.select('features')).transform(vegi1FeaturedDF)\n",
    "\n",
    "pandas_df = vegi1ClusteredDF.select(\"*\").toPandas()\n",
    "PixelsHarvested = pandas_df[pandas_df['prediction'] ==2].shape[0]\n",
    "Date = pandas_df.iloc[0]['date']\n",
    "# date\n",
    "\n",
    "# client.list_objects(Buc\n",
    "# Read the parquet file\n",
    "# buffer = io.BytesIO()\n",
    "# s3 = boto3.resource('s3')\n",
    "# for bucket in s3.buckets.all():\n",
    "#     print(bucket.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['tile_x', 'tile_y', 'x', 'y', 'date', 'mask', 'red', 'green', 'blue',\n",
       "       'B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B10',\n",
       "       'B11', 'B12', 'clouds', 'havested', 'NDVI', 'GNDVI', 'RDVI', 'RBNDVI',\n",
       "       'LCI', 'LAI', 'GLI', 'SCI', 'features', 'prediction'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# pandas_df['features']\n",
    "# pandas_df.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 2, 3, 1], dtype=int64)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pandas_df['prediction'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Objectlist = pd.DataFrame()\n",
    "my_bucket = s3.Bucket('canecrushers-raw')\n",
    "KeyFolder = 'img512'\n",
    "Objectlist = pd.DataFrame()\n",
    "for my_bucket_object in my_bucket.objects.all():\n",
    "#     print(my_bucket_object)\n",
    "    Objectlist.at[len(Objectlist),'Key']= my_bucket_object\n",
    "    \n",
    "Objectlist['Key'] = Objectlist['Key'].astype(str)\n",
    "Objectlist = Objectlist[Objectlist['Key'].str.contains(KeyFolder)].reset_index(drop=True)\n",
    "Objectlist['Key'] = Objectlist['Key'].str.split(KeyFolder,expand=True)[1]\n",
    "Objectlist=Objectlist[Objectlist['Key']!=(\"/')\")].reset_index(drop=True)\n",
    "Objectlist['Key'] = Objectlist['Key'].str[1:-2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Key</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>image_values_7680_10240_2016-12-22.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>image_values_7680_10240_2017-01-01.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>image_values_7680_10240_2017-01-11.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>image_values_7680_10240_2017-02-10.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>image_values_7680_10240_2017-02-20.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>image_values_7680_10240_2017-03-02.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>image_values_7680_10240_2017-03-12.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>image_values_7680_10240_2017-04-01.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>image_values_7680_10240_2017-04-11.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>image_values_7680_10240_2017-05-01.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>image_values_7680_10240_2017-05-21.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>image_values_7680_10240_2017-05-31.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>image_values_7680_10240_2017-06-20.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>image_values_7680_10240_2017-07-10.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>image_values_7680_10240_2017-07-20.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>image_values_7680_10240_2017-07-30.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>image_values_7680_10240_2017-08-09.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>image_values_7680_10240_2017-08-19.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>image_values_7680_10240_2017-09-08.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>image_values_7680_10240_2017-09-18.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>image_values_7680_10240_2017-09-28.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>image_values_7680_10240_2017-10-08.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>image_values_7680_10240_2017-10-28.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>image_values_7680_10240_2017-11-07.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>image_values_7680_10240_2017-11-17.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>image_values_7680_10240_2017-11-27.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>image_values_7680_10240_2017-12-07.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>image_values_7680_10240_2017-12-17.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>image_values_7680_10240_2017-12-27.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>image_values_7680_10240_2018-01-06.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>image_values_7680_10240_2018-07-05.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>image_values_7680_10240_2018-07-15.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>image_values_7680_10240_2018-07-25.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>image_values_7680_10240_2018-08-04.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>image_values_7680_10240_2018-08-14.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>image_values_7680_10240_2018-08-24.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>image_values_7680_10240_2018-09-03.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>image_values_7680_10240_2018-09-13.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>image_values_7680_10240_2018-10-03.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>image_values_7680_10240_2018-10-23.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>image_values_7680_10240_2018-11-02.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>image_values_7680_10240_2018-11-12.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>image_values_7680_10240_2018-11-22.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>image_values_7680_10240_2018-12-02.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>image_values_7680_10240_2019-01-01.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>image_values_7680_10240_2019-01-21.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>image_values_7680_10240_2019-02-20.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>image_values_7680_10240_2019-03-02.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>image_values_7680_10240_2019-03-12.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>image_values_7680_10240_2019-04-11.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>image_values_7680_10240_2019-04-21.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>image_values_7680_10240_2019-05-01.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>image_values_7680_10240_2019-05-11.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>image_values_7680_10240_2019-05-21.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>image_values_7680_10240_2019-06-10.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>image_values_7680_10240_2019-06-20.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>image_values_7680_10240_2019-06-30.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>image_values_7680_10240_2019-07-20.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>image_values_7680_10240_2019-07-30.snappy.parquet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>image_values_7680_10240_2019-08-09.snappy.parquet</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  Key\n",
       "0   image_values_7680_10240_2016-12-22.snappy.parquet\n",
       "1   image_values_7680_10240_2017-01-01.snappy.parquet\n",
       "2   image_values_7680_10240_2017-01-11.snappy.parquet\n",
       "3   image_values_7680_10240_2017-02-10.snappy.parquet\n",
       "4   image_values_7680_10240_2017-02-20.snappy.parquet\n",
       "5   image_values_7680_10240_2017-03-02.snappy.parquet\n",
       "6   image_values_7680_10240_2017-03-12.snappy.parquet\n",
       "7   image_values_7680_10240_2017-04-01.snappy.parquet\n",
       "8   image_values_7680_10240_2017-04-11.snappy.parquet\n",
       "9   image_values_7680_10240_2017-05-01.snappy.parquet\n",
       "10  image_values_7680_10240_2017-05-21.snappy.parquet\n",
       "11  image_values_7680_10240_2017-05-31.snappy.parquet\n",
       "12  image_values_7680_10240_2017-06-20.snappy.parquet\n",
       "13  image_values_7680_10240_2017-07-10.snappy.parquet\n",
       "14  image_values_7680_10240_2017-07-20.snappy.parquet\n",
       "15  image_values_7680_10240_2017-07-30.snappy.parquet\n",
       "16  image_values_7680_10240_2017-08-09.snappy.parquet\n",
       "17  image_values_7680_10240_2017-08-19.snappy.parquet\n",
       "18  image_values_7680_10240_2017-09-08.snappy.parquet\n",
       "19  image_values_7680_10240_2017-09-18.snappy.parquet\n",
       "20  image_values_7680_10240_2017-09-28.snappy.parquet\n",
       "21  image_values_7680_10240_2017-10-08.snappy.parquet\n",
       "22  image_values_7680_10240_2017-10-28.snappy.parquet\n",
       "23  image_values_7680_10240_2017-11-07.snappy.parquet\n",
       "24  image_values_7680_10240_2017-11-17.snappy.parquet\n",
       "25  image_values_7680_10240_2017-11-27.snappy.parquet\n",
       "26  image_values_7680_10240_2017-12-07.snappy.parquet\n",
       "27  image_values_7680_10240_2017-12-17.snappy.parquet\n",
       "28  image_values_7680_10240_2017-12-27.snappy.parquet\n",
       "29  image_values_7680_10240_2018-01-06.snappy.parquet\n",
       "..                                                ...\n",
       "40  image_values_7680_10240_2018-07-05.snappy.parquet\n",
       "41  image_values_7680_10240_2018-07-15.snappy.parquet\n",
       "42  image_values_7680_10240_2018-07-25.snappy.parquet\n",
       "43  image_values_7680_10240_2018-08-04.snappy.parquet\n",
       "44  image_values_7680_10240_2018-08-14.snappy.parquet\n",
       "45  image_values_7680_10240_2018-08-24.snappy.parquet\n",
       "46  image_values_7680_10240_2018-09-03.snappy.parquet\n",
       "47  image_values_7680_10240_2018-09-13.snappy.parquet\n",
       "48  image_values_7680_10240_2018-10-03.snappy.parquet\n",
       "49  image_values_7680_10240_2018-10-23.snappy.parquet\n",
       "50  image_values_7680_10240_2018-11-02.snappy.parquet\n",
       "51  image_values_7680_10240_2018-11-12.snappy.parquet\n",
       "52  image_values_7680_10240_2018-11-22.snappy.parquet\n",
       "53  image_values_7680_10240_2018-12-02.snappy.parquet\n",
       "54  image_values_7680_10240_2019-01-01.snappy.parquet\n",
       "55  image_values_7680_10240_2019-01-21.snappy.parquet\n",
       "56  image_values_7680_10240_2019-02-20.snappy.parquet\n",
       "57  image_values_7680_10240_2019-03-02.snappy.parquet\n",
       "58  image_values_7680_10240_2019-03-12.snappy.parquet\n",
       "59  image_values_7680_10240_2019-04-11.snappy.parquet\n",
       "60  image_values_7680_10240_2019-04-21.snappy.parquet\n",
       "61  image_values_7680_10240_2019-05-01.snappy.parquet\n",
       "62  image_values_7680_10240_2019-05-11.snappy.parquet\n",
       "63  image_values_7680_10240_2019-05-21.snappy.parquet\n",
       "64  image_values_7680_10240_2019-06-10.snappy.parquet\n",
       "65  image_values_7680_10240_2019-06-20.snappy.parquet\n",
       "66  image_values_7680_10240_2019-06-30.snappy.parquet\n",
       "67  image_values_7680_10240_2019-07-20.snappy.parquet\n",
       "68  image_values_7680_10240_2019-07-30.snappy.parquet\n",
       "69  image_values_7680_10240_2019-08-09.snappy.parquet\n",
       "\n",
       "[70 rows x 1 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for index,row Objectlist['Key'].iterrows():\n",
    "    KeyInput = \n",
    "# Objectlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Objectlist' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-8-ca1cee69f52e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mObjectlist\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Key'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'Objectlist' is not defined"
     ]
    }
   ],
   "source": [
    "Objectlist['Key']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     image_values_7680_10240_2016-12-22.snappy.parquet\n",
       "2     image_values_7680_10240_2017-01-01.snappy.parquet\n",
       "3     image_values_7680_10240_2017-01-11.snappy.parquet\n",
       "4     image_values_7680_10240_2017-02-10.snappy.parquet\n",
       "5     image_values_7680_10240_2017-02-20.snappy.parquet\n",
       "6     image_values_7680_10240_2017-03-02.snappy.parquet\n",
       "7     image_values_7680_10240_2017-03-12.snappy.parquet\n",
       "8     image_values_7680_10240_2017-04-01.snappy.parquet\n",
       "9     image_values_7680_10240_2017-04-11.snappy.parquet\n",
       "10    image_values_7680_10240_2017-05-01.snappy.parquet\n",
       "11    image_values_7680_10240_2017-05-21.snappy.parquet\n",
       "12    image_values_7680_10240_2017-05-31.snappy.parquet\n",
       "13    image_values_7680_10240_2017-06-20.snappy.parquet\n",
       "14    image_values_7680_10240_2017-07-10.snappy.parquet\n",
       "15    image_values_7680_10240_2017-07-20.snappy.parquet\n",
       "16    image_values_7680_10240_2017-07-30.snappy.parquet\n",
       "17    image_values_7680_10240_2017-08-09.snappy.parquet\n",
       "18    image_values_7680_10240_2017-08-19.snappy.parquet\n",
       "19    image_values_7680_10240_2017-09-08.snappy.parquet\n",
       "20    image_values_7680_10240_2017-09-18.snappy.parquet\n",
       "21    image_values_7680_10240_2017-09-28.snappy.parquet\n",
       "22    image_values_7680_10240_2017-10-08.snappy.parquet\n",
       "23    image_values_7680_10240_2017-10-28.snappy.parquet\n",
       "24    image_values_7680_10240_2017-11-07.snappy.parquet\n",
       "25    image_values_7680_10240_2017-11-17.snappy.parquet\n",
       "26    image_values_7680_10240_2017-11-27.snappy.parquet\n",
       "27    image_values_7680_10240_2017-12-07.snappy.parquet\n",
       "28    image_values_7680_10240_2017-12-17.snappy.parquet\n",
       "29    image_values_7680_10240_2017-12-27.snappy.parquet\n",
       "30    image_values_7680_10240_2018-01-06.snappy.parquet\n",
       "                            ...                        \n",
       "41    image_values_7680_10240_2018-07-05.snappy.parquet\n",
       "42    image_values_7680_10240_2018-07-15.snappy.parquet\n",
       "43    image_values_7680_10240_2018-07-25.snappy.parquet\n",
       "44    image_values_7680_10240_2018-08-04.snappy.parquet\n",
       "45    image_values_7680_10240_2018-08-14.snappy.parquet\n",
       "46    image_values_7680_10240_2018-08-24.snappy.parquet\n",
       "47    image_values_7680_10240_2018-09-03.snappy.parquet\n",
       "48    image_values_7680_10240_2018-09-13.snappy.parquet\n",
       "49    image_values_7680_10240_2018-10-03.snappy.parquet\n",
       "50    image_values_7680_10240_2018-10-23.snappy.parquet\n",
       "51    image_values_7680_10240_2018-11-02.snappy.parquet\n",
       "52    image_values_7680_10240_2018-11-12.snappy.parquet\n",
       "53    image_values_7680_10240_2018-11-22.snappy.parquet\n",
       "54    image_values_7680_10240_2018-12-02.snappy.parquet\n",
       "55    image_values_7680_10240_2019-01-01.snappy.parquet\n",
       "56    image_values_7680_10240_2019-01-21.snappy.parquet\n",
       "57    image_values_7680_10240_2019-02-20.snappy.parquet\n",
       "58    image_values_7680_10240_2019-03-02.snappy.parquet\n",
       "59    image_values_7680_10240_2019-03-12.snappy.parquet\n",
       "60    image_values_7680_10240_2019-04-11.snappy.parquet\n",
       "61    image_values_7680_10240_2019-04-21.snappy.parquet\n",
       "62    image_values_7680_10240_2019-05-01.snappy.parquet\n",
       "63    image_values_7680_10240_2019-05-11.snappy.parquet\n",
       "64    image_values_7680_10240_2019-05-21.snappy.parquet\n",
       "65    image_values_7680_10240_2019-06-10.snappy.parquet\n",
       "66    image_values_7680_10240_2019-06-20.snappy.parquet\n",
       "67    image_values_7680_10240_2019-06-30.snappy.parquet\n",
       "68    image_values_7680_10240_2019-07-20.snappy.parquet\n",
       "69    image_values_7680_10240_2019-07-30.snappy.parquet\n",
       "70    image_values_7680_10240_2019-08-09.snappy.parquet\n",
       "Name: Key, Length: 70, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# df['DATE'].astype(str).str[:-2]\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "ename": "ParamValidationError",
     "evalue": "Parameter validation failed:\nMissing required parameter in input: \"Bucket\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mParamValidationError\u001b[0m                      Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-31-7ed65411cfd5>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0ms3\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlist_objects\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\botocore\\client.py\u001b[0m in \u001b[0;36m_api_call\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    355\u001b[0m                     \"%s() only accepts keyword arguments.\" % py_operation_name)\n\u001b[0;32m    356\u001b[0m             \u001b[1;31m# The \"self\" in this scope is referring to the BaseClient.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 357\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_make_api_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moperation_name\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    358\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    359\u001b[0m         \u001b[0m_api_call\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpy_operation_name\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\botocore\\client.py\u001b[0m in \u001b[0;36m_make_api_call\u001b[1;34m(self, operation_name, api_params)\u001b[0m\n\u001b[0;32m    632\u001b[0m         }\n\u001b[0;32m    633\u001b[0m         request_dict = self._convert_to_request_dict(\n\u001b[1;32m--> 634\u001b[1;33m             api_params, operation_model, context=request_context)\n\u001b[0m\u001b[0;32m    635\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    636\u001b[0m         \u001b[0mservice_id\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_service_model\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mservice_id\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhyphenize\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\botocore\\client.py\u001b[0m in \u001b[0;36m_convert_to_request_dict\u001b[1;34m(self, api_params, operation_model, context)\u001b[0m\n\u001b[0;32m    680\u001b[0m             api_params, operation_model, context)\n\u001b[0;32m    681\u001b[0m         request_dict = self._serializer.serialize_to_request(\n\u001b[1;32m--> 682\u001b[1;33m             api_params, operation_model)\n\u001b[0m\u001b[0;32m    683\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_client_config\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minject_host_prefix\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    684\u001b[0m             \u001b[0mrequest_dict\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'host_prefix'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\botocore\\validate.py\u001b[0m in \u001b[0;36mserialize_to_request\u001b[1;34m(self, parameters, operation_model)\u001b[0m\n\u001b[0;32m    295\u001b[0m                                                     operation_model.input_shape)\n\u001b[0;32m    296\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mreport\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhas_errors\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 297\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mParamValidationError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mreport\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mreport\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgenerate_report\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    298\u001b[0m         return self._serializer.serialize_to_request(parameters,\n\u001b[0;32m    299\u001b[0m                                                      operation_model)\n",
      "\u001b[1;31mParamValidationError\u001b[0m: Parameter validation failed:\nMissing required parameter in input: \"Bucket\""
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import io\n",
    "import boto3\n",
    "import pyarrow.parquet as pq\n",
    "\n",
    "buffer = io.BytesIO()\n",
    "s3 = boto3.resource('s3')\n",
    "s3_object = s3.Object('canecrushers-raw', 'img32/image_values_7680_10240_2016-12-22.snappy.parquet')\n",
    "s3_object.download_fileobj(buffer)\n",
    "table = pq.read_table(buffer)\n",
    "df = table.to_pandas()\n",
    "# s3.put_object(Body=object_data, Bucket='BucketName', Key='')\n",
    "\n",
    "# d\n",
    "sqlCtx = SQLContext(sc)\n",
    "spark_df = sqlCtx.createDataFrame(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "numberOfClusters = 4\n",
    "vegi1InputCols = ['NDVI','GNDVI','LAI']\n",
    "kmeans = KMeans().setK(numberOfClusters).setSeed(1)\n",
    "vegi1FeaturedDF = VectorAssembler(inputCols=vegi1InputCols, outputCol=\"features\").transform(spark_df)\n",
    "vegi1ClusteredDF = kmeans.fit(vegi1FeaturedDF.select('features')).transform(vegi1FeaturedDF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tile_x</th>\n",
       "      <th>tile_y</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>date</th>\n",
       "      <th>mask</th>\n",
       "      <th>red</th>\n",
       "      <th>green</th>\n",
       "      <th>blue</th>\n",
       "      <th>B01</th>\n",
       "      <th>...</th>\n",
       "      <th>GNDVI</th>\n",
       "      <th>RDVI</th>\n",
       "      <th>RBNDVI</th>\n",
       "      <th>LCI</th>\n",
       "      <th>LAI</th>\n",
       "      <th>SCI</th>\n",
       "      <th>NDMI</th>\n",
       "      <th>GLI</th>\n",
       "      <th>features</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7680</td>\n",
       "      <td>10240</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-12-22</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>104</td>\n",
       "      <td>111</td>\n",
       "      <td>3430</td>\n",
       "      <td>...</td>\n",
       "      <td>2605</td>\n",
       "      <td>487194</td>\n",
       "      <td>2536</td>\n",
       "      <td>22</td>\n",
       "      <td>556</td>\n",
       "      <td>60</td>\n",
       "      <td>-60</td>\n",
       "      <td>556</td>\n",
       "      <td>[2783.0, 2605.0, 556.0]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7680</td>\n",
       "      <td>10240</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-12-22</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>108</td>\n",
       "      <td>113</td>\n",
       "      <td>3430</td>\n",
       "      <td>...</td>\n",
       "      <td>2467</td>\n",
       "      <td>476218</td>\n",
       "      <td>2461</td>\n",
       "      <td>23</td>\n",
       "      <td>400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>400</td>\n",
       "      <td>[2694.0, 2467.0, 400.0]</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7680</td>\n",
       "      <td>10240</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2016-12-22</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>108</td>\n",
       "      <td>113</td>\n",
       "      <td>3526</td>\n",
       "      <td>...</td>\n",
       "      <td>2571</td>\n",
       "      <td>495551</td>\n",
       "      <td>2563</td>\n",
       "      <td>23</td>\n",
       "      <td>512</td>\n",
       "      <td>213</td>\n",
       "      <td>-213</td>\n",
       "      <td>512</td>\n",
       "      <td>[2788.0, 2571.0, 512.0]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7680</td>\n",
       "      <td>10240</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2016-12-22</td>\n",
       "      <td>3</td>\n",
       "      <td>104</td>\n",
       "      <td>110</td>\n",
       "      <td>114</td>\n",
       "      <td>3526</td>\n",
       "      <td>...</td>\n",
       "      <td>2630</td>\n",
       "      <td>518474</td>\n",
       "      <td>2672</td>\n",
       "      <td>24</td>\n",
       "      <td>446</td>\n",
       "      <td>47</td>\n",
       "      <td>-47</td>\n",
       "      <td>446</td>\n",
       "      <td>[2879.0, 2630.0, 446.0]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7680</td>\n",
       "      <td>10240</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2016-12-22</td>\n",
       "      <td>2</td>\n",
       "      <td>104</td>\n",
       "      <td>111</td>\n",
       "      <td>115</td>\n",
       "      <td>3526</td>\n",
       "      <td>...</td>\n",
       "      <td>2698</td>\n",
       "      <td>543941</td>\n",
       "      <td>2764</td>\n",
       "      <td>24</td>\n",
       "      <td>574</td>\n",
       "      <td>109</td>\n",
       "      <td>-109</td>\n",
       "      <td>574</td>\n",
       "      <td>[3001.0, 2698.0, 574.0]</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   tile_x  tile_y  x  y        date  mask  red  green  blue   B01     ...      \\\n",
       "0    7680   10240  0  0  2016-12-22     0  100    104   111  3430     ...       \n",
       "1    7680   10240  0  1  2016-12-22     0  103    108   113  3430     ...       \n",
       "2    7680   10240  0  2  2016-12-22     0  103    108   113  3526     ...       \n",
       "3    7680   10240  0  3  2016-12-22     3  104    110   114  3526     ...       \n",
       "4    7680   10240  0  4  2016-12-22     2  104    111   115  3526     ...       \n",
       "\n",
       "   GNDVI    RDVI  RBNDVI  LCI  LAI  SCI  NDMI  GLI                 features  \\\n",
       "0   2605  487194    2536   22  556   60   -60  556  [2783.0, 2605.0, 556.0]   \n",
       "1   2467  476218    2461   23  400    0     0  400  [2694.0, 2467.0, 400.0]   \n",
       "2   2571  495551    2563   23  512  213  -213  512  [2788.0, 2571.0, 512.0]   \n",
       "3   2630  518474    2672   24  446   47   -47  446  [2879.0, 2630.0, 446.0]   \n",
       "4   2698  543941    2764   24  574  109  -109  574  [3001.0, 2698.0, 574.0]   \n",
       "\n",
       "   prediction  \n",
       "0           0  \n",
       "1           2  \n",
       "2           0  \n",
       "3           0  \n",
       "4           0  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2016-12-22'], dtype=object)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df['date'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'px' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-8-746181583e1a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m px.scatter_matrix(data_frame=vegi1Scatter_pd\n\u001b[0m\u001b[0;32m      2\u001b[0m                   \u001b[1;33m,\u001b[0m \u001b[0mdimensions\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mvegi1InputCols\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m                   \u001b[1;33m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"prediction\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m                  )\n",
      "\u001b[1;31mNameError\u001b[0m: name 'px' is not defined"
     ]
    }
   ],
   "source": [
    "px.scatter_matrix(data_frame=vegi1Scatter_pd\n",
    "                  , dimensions=vegi1InputCols\n",
    "                  , color=\"prediction\"\n",
    "                 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ! pip install pyarrow\n",
    "# columns = [['NDVI','GNDVI','LAI']]\n",
    "# Trains a k-means model.\n",
    "# sparkdf = spark_session.createDataFrame(df)\n",
    "\n",
    "\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'shape'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-21-88caee21f4e3>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mvegi1ClusteredDF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pyspark\\sql\\dataframe.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   1299\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1300\u001b[0m             raise AttributeError(\n\u001b[1;32m-> 1301\u001b[1;33m                 \"'%s' object has no attribute '%s'\" % (self.__class__.__name__, name))\n\u001b[0m\u001b[0;32m   1302\u001b[0m         \u001b[0mjc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1303\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mColumn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'shape'"
     ]
    }
   ],
   "source": [
    "vegi1ClusteredDF.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'vegi1ClusteredDF' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-4-3dc6e7717886>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mvegi1ClusteredDF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'vegi1ClusteredDF' is not defined"
     ]
    }
   ],
   "source": [
    "vegi1ClusteredDF.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "72"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df[pandas_df['prediction']==3].shape[0] * "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
